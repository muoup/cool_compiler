#!/bin/bash

input="5 5 5 5"
pass=0
fail=0
if [ "$#" -gt 0 ]; then
    input=$1
fi

cd restricted_testcases || exit
printf "Checking for correct outputs\n"

for file in *.cl; do
    printf "Running test: %s -- " "$file"
    cool --tac "$file"
    them=$(echo "$input" | cool "$file-tac")

    dune exec --profile=release cool "$file-tac" 2> /dev/null
    us=$(echo "$input" | cool "$file-tac")

    if [ "$them" != "$us" ]; then
        echo "FAILED"
        fail=$((fail+1))
    else 
        echo "PASSED"
        pass=$((pass+1))
    fi
    rm "$file-tac"

done
echo "Passed: $pass"
echo "Failed: $fail"

# if [ $fail != 0 ]; then 
#     exit 1
# fi

printf "\nTesting for successful dead code elimination\n"

# The correct version of this would loop forever because line 47, which I copied directly from pa4 
# instructions, doesn't return. So, I'm simply comparing the line count, which is an okay approximation
fast=0
slow=0
for file in *.cl; do
    printf "Running test: %s -- " "$file"
    cool --tac --opt "$file"
    # them=$(cool --profile "${file}-tac" | grep STEPS)
    them=$(wc -l "${file}-tac")
    them=$(echo "$them" | grep -oE '[0-9]+')

    cool --tac "$file"
    dune exec --profile=release cool "$file-type" 2> /dev/null
    # us=$(cool --profile "${file}-tac" | grep STEPS)
    us=$(wc -l "${file}-tac")
    us=$(echo "$us" | grep -oE '[0-9]+')

    df=$(( them - us ))
    if [ "$them" -gt "$us" ]; then
        printf "FASTER by %d\n" "$df"
        fast=$((fast+1))
    else 
        df=$((-1 * df))
        printf "SLOWER by %d\n" "$df"
        slow=$((slow+1))
    fi
    rm "$file-tac"

done
echo "Faster: $fast"
echo "Slower: $slow"

cd ..
